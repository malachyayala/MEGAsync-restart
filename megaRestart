#!/usr/bin/env python3
import os
import psutil # type: ignore
import time
import subprocess
import random

vpn_locations = {
    "al": ["tia"],
    "au": ["adl", "bne", "mel", "per", "syd"],
    "at": ["vie"],
    "be": ["bru"],
    "br": ["sao"],
    "bg": ["sof"],
    "ca": ["yyc", "mtr", "tor", "van"],
    "cl": ["scl"],
    "co": ["bog"],
    "hr": ["zag"],
    "cy": ["nic"],
    "cz": ["prg"],
    "dk": ["cph"],
    "ee": ["tll"],
    "fi": ["hel"],
    "fr": ["bod", "mrs", "par"],
    "de": ["ber", "dus", "fra"],
    "gr": ["ath"],
    "hk": ["hkg"],
    "hu": ["bud"],
    "id": ["jpu"],
    "ie": ["dub"],
    "il": ["tlv"],
    "it": ["mil", "pmo"],
    "jp": ["osa", "tyo"],
    "mx": ["qro"],
    "nl": ["ams"],
    "nz": ["akl"],
    "ng": ["los"],
    "no": ["osl", "svg"],
    "pe": ["lim"],
    "ph": ["mnl"],
    "pl": ["waw"],
    "pt": ["lis"],
    "ro": ["buh"],
    "rs": ["beg"],
    "sg": ["sin"],
    "sk": ["bts"],
    "si": ["lju"],
    "za": ["jnb"],
    "es": ["bcn", "mad", "vlc"],
    "se": ["got", "mma", "sto"],
        "ch": ["zrh"],
    "th": ["bkk"],
    "tr": ["ist"],
    "gb": ["glw", "lon", "mnc"],
    "ua": ["iev"],
    "us": [
        "qas", "atl", "bos", "chi", "dal", "den", "det", "hou", "lax",
        "txc", "mia", "nyc", "phx", "rag", "slc", "sjc", "sea", "uyk"
    ]
}

def set_mullvad_server(country, city=None, server=None):
    """Set the Mullvad server location."""
    command = ["mullvad", "relay", "set", "location", country]
    if city:
        command.append(city)
    if server:
        command.append(server)

    try:
        subprocess.run(command, check=True)
        print(f"Set Mullvad server to {country}, {city or ''}, {server or ''}")
    except subprocess.CalledProcessError:
        print("Failed to set Mullvad server.")

def connect_mullvad():
    """Connect to Mullvad VPN."""
    try:
        subprocess.run(["mullvad", "connect"], check=True)
        print("Connected to Mullvad VPN.")
    except subprocess.CalledProcessError:
        print("Failed to connect to Mullvad VPN.")

def disconnect_mullvad():
    """Disconnect from Mullvad VPN."""
    try:
        subprocess.run(["mullvad", "disconnect"], check=True)
        print("Disconnected from Mullvad VPN.")
    except subprocess.CalledProcessError:
        print("Failed to disconnect from Mullvad VPN.")

def stop_megasync():
    """Stops the MEGAsync process."""
    for process in psutil.process_iter(['name']):
        if process.info['name'] == 'MEGAsync':
            print("Stopping MEGAsync...")
            process.terminate()
            process.wait()  # Wait for the process to terminate
            print("MEGAsync stopped.")
            return True
    print("MEGAsync is not running.")
    return False

def start_megasync():
    """Starts the MEGAsync process on macOS."""
    try:
        print("Starting MEGAsync...")
        os.system("open -a MEGAsync")  # Open the MEGAsync app
        print("MEGAsync started.")
    except Exception as e:
        print(f"Error starting MEGAsync: {e}")

def restart_megasync():
    """Restarts MEGAsync."""
    if stop_megasync():
        time.sleep(3)  # Wait a few seconds before restarting
    start_megasync()
    
def stop_terminal():
    """Stops the Terminal process."""
    for process in psutil.process_iter(['name']):
        if process.info['name'] == 'Terminal':
            print("Stopping Terminal...")
            process.terminate()
            process.wait()  # Wait for the process to terminate
            print("Terminal stopped.")
            return True
    print("Terminal is not running.")
    return False
    
def randomize_connection():
# Randomly select a key (country code)
    random_country = random.choice(list(vpn_locations.keys()))

# Randomly select a city from the selected country's cities
    random_city = random.choice(vpn_locations[random_country])
    
    return [random_country, random_city]

def is_mega_download_active():
    """Check if MEGAsync is active and consuming network or CPU resources."""
    for process in psutil.process_iter(['name', 'cpu_percent']):
        if process.info['name'] == 'MEGAsync':
            # Check CPU usage (could indicate activity)
            if process.cpu_percent(interval=3) > 29.0:
                return True
    return False


if __name__ == "__main__":
    download_status = is_mega_download_active()
    if download_status != True:
        server = randomize_connection()
        set_mullvad_server(server[0], server[1])
        connect_mullvad()

        time.sleep(10)  # Wait a few seconds before restarting MEGAsync

        restart_megasync()
    
    stop_terminal()
